from __future__ import print_function
import sys
from pacolib import *
if len(sys.argv) < 2:
    sys.stderr.write("\nUsage: "+sys.argv[0]+" relsize\n\n")
    sys.exit(1)
n = int(sys.argv[1])

print ("Require Export Program.Basics. Open Scope program_scope.")
print ("From Paco Require Import paconotation_internal paco_internal pacotac_internal.")
print ("From Paco Require Export paconotation.")
print ("Set Implicit Arguments.")
print ("")
print ("Section PACO"+str(n)+".")
print ("")
for i in range(n):
    print ("Variable T"+str(i)+" : "+ifpstr(i,"forall"),end="")
    for j in range(i):
        print (" (x"+str(j)+": @T"+str(j)+itrstr(" x",j)+")",end="")
    print (ifpstr(i,", ")+"Type.")
print ("")
print ("(** ** Predicates of Arity "+str(n)+"")
print ("*)")
print ("")
print ("Definition paco"+str(n)+"(gf : rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+")(r: rel"+str(n)+""+itrstr(" T", n)+") : rel"+str(n)+""+itrstr(" T", n)+" :=")
print ("  @curry"+str(n)+itrstr(" T", n)+" (paco (fun R0 => @uncurry"+str(n)+itrstr(" T", n)+" (gf (@curry"+str(n)+itrstr(" T", n)+" R0))) (@uncurry"+str(n)+itrstr(" T", n)+" r)).")
print ("")
print ("Definition upaco"+str(n)+"(gf : rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+")(r: rel"+str(n)+""+itrstr(" T", n)+") := paco"+str(n)+" gf r \\"+str(n)+"/ r.")
print ("Arguments paco"+str(n)+" : clear implicits.")
print ("Arguments upaco"+str(n)+" : clear implicits.")
print ("#[local] Hint Unfold upaco"+str(n)+" : core.")
print ("")
print ("Definition monotone"+str(n)+" (gf: rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") :=")
print ("  forall"+itrstr(" x", n)+" r r' (IN: gf r"+itrstr(" x", n)+") (LE: r <"+str(n)+"= r'), gf r'"+itrstr(" x", n)+".")
print ("")
print ("Definition _monotone"+str(n)+" (gf: rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") :=")
print ("  forall r r'(LE: r <"+str(n)+"= r'), gf r <"+str(n)+"== gf r'.")
print ("")
print ("Lemma monotone"+str(n)+"_eq (gf: rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") :")
print ("  monotone"+str(n)+" gf <-> _monotone"+str(n)+" gf.")
print ("Proof. unfold monotone"+str(n)+", _monotone"+str(n)+", le"+str(n)+". split; intros; eapply H; eassumption. Qed.")
print ("")
print ("Lemma monotone"+str(n)+"_map (gf: rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+")")
print ("      (MON: _monotone"+str(n)+" gf) :")
print ("  _monotone (fun R0 => @uncurry"+str(n)+itrstr(" T", n)+" (gf (@curry"+str(n)+itrstr(" T", n)+" R0))).")
print ("Proof.")
print ("  red; intros. apply uncurry_map"+str(n)+". apply MON; apply curry_map"+str(n)+"; assumption.")
print ("Qed.")
print ("")
print ("Lemma monotone"+str(n)+"_compose (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+")")
print ("      (MON1: monotone"+str(n)+" gf)")
print ("      (MON2: monotone"+str(n)+" gf'):")
print ("  monotone"+str(n)+" (compose gf gf').")
print ("Proof.")
print ("  red; intros. eapply MON1. apply IN.")
print ("  intros. eapply MON2. apply PR. apply LE.")
print ("Qed.")
print ("")
print ("Lemma monotone"+str(n)+"_union (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+")")
print ("      (MON1: monotone"+str(n)+" gf)")
print ("      (MON2: monotone"+str(n)+" gf'):")
print ("  monotone"+str(n)+" (gf \\"+str(n+1)+"/ gf').")
print ("Proof.")
print ("  red; intros. destruct IN.")
print ("  - left. eapply MON1. apply H. apply LE.")
print ("  - right. eapply MON2. apply H. apply LE.")
print ("Qed.")
print ("")
print ("Lemma _paco"+str(n)+"_mon_gen (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") r r'")
print ("    (LEgf: gf <"+str(n+1)+"= gf')")
print ("    (LEr: r <"+str(n)+"= r'):")
print ("  paco"+str(n)+" gf r <"+str(n)+"== paco"+str(n)+" gf' r'.")
print ("Proof.")
print ("  apply curry_map"+str(n)+". red; intros. eapply paco_mon_gen. apply PR.")
print ("  - intros. apply LEgf, PR0.")
print ("  - intros. apply LEr, PR0.")
print ("Qed.")
print ("")
print ("Lemma paco"+str(n)+"_mon_gen (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") r r'"+itrstr(" x", n)+"")
print ("    (REL: paco"+str(n)+" gf r"+itrstr(" x", n)+")")
print ("    (LEgf: gf <"+str(n+1)+"= gf')")
print ("    (LEr: r <"+str(n)+"= r'):")
print ("  paco"+str(n)+" gf' r'"+itrstr(" x", n)+".")
print ("Proof.")
print ("  eapply _paco"+str(n)+"_mon_gen; [apply LEgf | apply LEr | apply REL].")
print ("Qed.")
print ("")
print ("Lemma paco"+str(n)+"_mon_bot (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") r'"+itrstr(" x", n)+"")
print ("    (REL: paco"+str(n)+" gf bot"+str(n)+""+itrstr(" x", n)+")")
print ("    (LEgf: gf <"+str(n+1)+"= gf'):")
print ("  paco"+str(n)+" gf' r'"+itrstr(" x", n)+".")
print ("Proof.")
print ("  eapply paco"+str(n)+"_mon_gen; [apply REL | apply LEgf | intros; contradiction PR].")
print ("Qed.")
print ("")
print ("Lemma upaco"+str(n)+"_mon_gen (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") r r'"+itrstr(" x", n)+"")
print ("    (REL: upaco"+str(n)+" gf r"+itrstr(" x", n)+")")
print ("    (LEgf: gf <"+str(n+1)+"= gf')")
print ("    (LEr: r <"+str(n)+"= r'):")
print ("  upaco"+str(n)+" gf' r'"+itrstr(" x", n)+".")
print ("Proof.")
print ("  destruct REL.")
print ("  - left. eapply paco"+str(n)+"_mon_gen; [apply H | apply LEgf | apply LEr].")
print ("  - right. apply LEr, H.")
print ("Qed.")
print ("")
print ("Lemma upaco"+str(n)+"_mon_bot (gf gf': rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+") r'"+itrstr(" x", n)+"")
print ("    (REL: upaco"+str(n)+" gf bot"+str(n)+""+itrstr(" x", n)+")")
print ("    (LEgf: gf <"+str(n+1)+"= gf'):")
print ("  upaco"+str(n)+" gf' r'"+itrstr(" x", n)+".")
print ("Proof.")
print ("  eapply upaco"+str(n)+"_mon_gen; [apply REL | apply LEgf | intros; contradiction PR].")
print ("Qed.")
print ("")
print ("Section Arg"+str(n)+".")
print ("")
print ("Variable gf : rel"+str(n)+""+itrstr(" T", n)+" -> rel"+str(n)+""+itrstr(" T", n)+".")
print ("Arguments gf : clear implicits.")
print ("")
print ("Theorem _paco"+str(n)+"_mon: _monotone"+str(n)+" (paco"+str(n)+" gf).")
print ("Proof.")
print ("  red; intros. eapply curry_map"+str(n)+", _paco_mon; apply uncurry_map"+str(n)+"; assumption.")
print ("Qed.")
print ("")
print ("Theorem _paco"+str(n)+"_acc: forall")
print ("  l r (OBG: forall rr (INC: r <"+str(n)+"== rr) (CIH: l <"+str(n)+"== rr), l <"+str(n)+"== paco"+str(n)+" gf rr),")
print ("  l <"+str(n)+"== paco"+str(n)+" gf r.")
print ("Proof.")
print ("  intros. apply uncurry_adjoint1_"+str(n)+".")
print ("  eapply _paco_acc. intros.")
print ("  apply uncurry_adjoint1_"+str(n)+" in INC. apply uncurry_adjoint1_"+str(n)+" in CIH.")
print ("  apply uncurry_adjoint2_"+str(n)+".")
print ("  eapply le"+str(n)+"_trans. eapply (OBG _ INC CIH).")
print ("  apply curry_map"+str(n)+".")
print ("  apply _paco_mon; try apply le1_refl; apply curry_bij1_"+str(n)+".")
print ("Qed.")
print ("")
print ("Theorem _paco"+str(n)+"_mult_strong: forall r,")
print ("  paco"+str(n)+" gf (upaco"+str(n)+" gf r) <"+str(n)+"== paco"+str(n)+" gf r.")
print ("Proof.")
print ("  intros. apply curry_map"+str(n)+".")
print ("  eapply le1_trans; [| eapply _paco_mult_strong].")
print ("  apply _paco_mon; intros [] H; apply H.")
print ("Qed.")
print ("")
print ("Theorem _paco"+str(n)+"_fold: forall r,")
print ("  gf (upaco"+str(n)+" gf r) <"+str(n)+"== paco"+str(n)+" gf r.")
print ("Proof.")
print ("  intros. apply uncurry_adjoint1_"+str(n)+".")
print ("  eapply le1_trans; [| apply _paco_fold]. apply le1_refl.")
print ("Qed.")
print ("")
print ("Theorem _paco"+str(n)+"_unfold: forall (MON: _monotone"+str(n)+" gf) r,")
print ("  paco"+str(n)+" gf r <"+str(n)+"== gf (upaco"+str(n)+" gf r).")
print ("Proof.")
print ("  intros. apply curry_adjoint2_"+str(n)+".")
print ("  eapply _paco_unfold; apply monotone"+str(n)+"_map; assumption.")
print ("Qed.")
print ("")
print ("Theorem paco"+str(n)+"_acc: forall")
print ("  l r (OBG: forall rr (INC: r <"+str(n)+"= rr) (CIH: l <"+str(n)+"= rr), l <"+str(n)+"= paco"+str(n)+" gf rr),")
print ("  l <"+str(n)+"= paco"+str(n)+" gf r.")
print ("Proof.")
print ("  apply _paco"+str(n)+"_acc.")
print ("Qed.")
print ("")
print ("Theorem paco"+str(n)+"_mon: monotone"+str(n)+" (paco"+str(n)+" gf).")
print ("Proof.")
print ("  apply monotone"+str(n)+"_eq.")
print ("  apply _paco"+str(n)+"_mon.")
print ("Qed.")
print ("")
print ("Theorem upaco"+str(n)+"_mon: monotone"+str(n)+" (upaco"+str(n)+" gf).")
print ("Proof.")
print ("  red; intros.")
print ("  destruct IN.")
print ("  - left. eapply paco"+str(n)+"_mon. apply H. apply LE.")
print ("  - right. apply LE, H.")
print ("Qed.")
print ("")
print ("Theorem paco"+str(n)+"_mult_strong: forall r,")
print ("  paco"+str(n)+" gf (upaco"+str(n)+" gf r) <"+str(n)+"= paco"+str(n)+" gf r.")
print ("Proof.")
print ("  apply _paco"+str(n)+"_mult_strong.")
print ("Qed.")
print ("")
print ("Corollary paco"+str(n)+"_mult: forall r,")
print ("  paco"+str(n)+" gf (paco"+str(n)+" gf r) <"+str(n)+"= paco"+str(n)+" gf r.")
print ("Proof. intros; eapply paco"+str(n)+"_mult_strong, paco"+str(n)+"_mon; [apply PR|..]; intros; left; assumption. Qed.")
print ("")
print ("Theorem paco"+str(n)+"_fold: forall r,")
print ("  gf (upaco"+str(n)+" gf r) <"+str(n)+"= paco"+str(n)+" gf r.")
print ("Proof.")
print ("  apply _paco"+str(n)+"_fold.")
print ("Qed.")
print ("")
print ("Theorem paco"+str(n)+"_unfold: forall (MON: monotone"+str(n)+" gf) r,")
print ("  paco"+str(n)+" gf r <"+str(n)+"= gf (upaco"+str(n)+" gf r).")
print ("Proof.")
print ("  intro. eapply _paco"+str(n)+"_unfold; apply monotone"+str(n)+"_eq; assumption.")
print ("Qed.")
print ("")
print ("End Arg"+str(n)+".")
print ("")
print ("Arguments paco"+str(n)+"_acc : clear implicits.")
print ("Arguments paco"+str(n)+"_mon : clear implicits.")
print ("Arguments upaco"+str(n)+"_mon : clear implicits.")
print ("Arguments paco"+str(n)+"_mult_strong : clear implicits.")
print ("Arguments paco"+str(n)+"_mult : clear implicits.")
print ("Arguments paco"+str(n)+"_fold : clear implicits.")
print ("Arguments paco"+str(n)+"_unfold : clear implicits.")
print ("")
print ("Global Instance paco"+str(n)+"_inst  (gf : rel"+str(n)+""+itrstr(" T", n)+"->_) r"+itrstr(" x", n)+" : paco_class (paco"+str(n)+" gf r"+itrstr(" x", n)+") :=")
print ("{ pacoacc    := paco"+str(n)+"_acc gf;")
print ("  pacomult   := paco"+str(n)+"_mult gf;")
print ("  pacofold   := paco"+str(n)+"_fold gf;")
print ("  pacounfold := paco"+str(n)+"_unfold gf }.")
print ("")
print ("End PACO"+str(n)+".")
print ("")
print ("Global Opaque paco"+str(n)+".")
print ("")
print ("#[export] Hint Unfold upaco"+str(n)+" : core.")
print ("#[export] Hint Resolve paco"+str(n)+"_fold : core.")
print ("#[export] Hint Unfold monotone"+str(n)+" : core.")
print ("")
